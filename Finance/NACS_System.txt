@using Finance.Shared

<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
-e 
--- End of ./App.razor ---

﻿using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using SharedLibrary.Abstract;
using SharedLibrary.Interfaces.Finance; 
using SharedLibrary.Data.Finance;
using Microsoft.Extensions.Configuration;
using System.Net.Http;
using System.Text.Json;
using System.Text;
using System;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace Finance.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class FinanceController : Controller
    {
        private readonly ILogger<FinanceController> _logger;
        private readonly string _centralServerBaseUrl;

        public FinanceController(IConfiguration configuration, ILogger<FinanceController> logger)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _centralServerBaseUrl = configuration["CentralServerBaseUrl"];
        }

        // -------------------- HttpPost Actions --------------------

        [HttpPost("PushAsset")]
        public async Task<IActionResult> PushAsset([FromBody] Asset asset)
        {
            if (asset == null)
            {
                _logger.LogError("PushAsset called with null data.");
                return BadRequest("Asset data cannot be null.");
            }

            try
            {
                using (HttpClient client = new HttpClient())
                {
                    var options = new JsonSerializerOptions
                    {
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                    };
                    string json = JsonSerializer.Serialize(asset, options);
                    var content = new StringContent(json, Encoding.UTF8, "application/json");

                    string apiUrl = $"{_centralServerBaseUrl}/api/Data/ReceiveData?dataType=Asset";
                    _logger.LogInformation($"Sending Asset data to Central Server API: {apiUrl}");

                    HttpResponseMessage response = await client.PostAsync(apiUrl, content);

                    if (response.IsSuccessStatusCode)
                    {
                        _logger.LogInformation($"Asset data sent successfully to Central Server (Status: {response.StatusCode}).");
                        return Ok();
                    }
                    else
                    {
                        _logger.LogError($"Error sending Asset data to Central Server. Status code: {response.StatusCode}, Content: {await response.Content.ReadAsStringAsync()}");
                        return StatusCode((int)response.StatusCode, $"Error: {response.ReasonPhrase}");
                    }
                }
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError($"HTTP Request Exception: {ex.Message}");
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
            catch (JsonException ex)
            {
                _logger.LogError($"JSON Serialization Exception: {ex.Message}");
                return BadRequest($"Invalid data format: {ex.Message}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"An unexpected error occurred: {ex.Message}");
                return StatusCode(500, "An unexpected error occurred.  See logs for details.");
            }
        }

        [HttpPost("PushBalanceSheet")]
        public async Task<IActionResult> PushBalanceSheet([FromBody] BalanceSheet balanceSheet)
        {
            if (balanceSheet == null)
            {
                _logger.LogError("PushBalanceSheet called with null data.");
                return BadRequest("BalanceSheet data cannot be null.");
            }

            try
            {
                using (HttpClient client = new HttpClient())
                {
                    var options = new JsonSerializerOptions
                    {
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                    };
                    string json = JsonSerializer.Serialize(balanceSheet, options);
                    var content = new StringContent(json, Encoding.UTF8, "application/json");

                    string apiUrl = $"{_centralServerBaseUrl}/api/Data/ReceiveData?dataType=BalanceSheet";
                    _logger.LogInformation($"Sending BalanceSheet data to Central Server API: {apiUrl}");

                    HttpResponseMessage response = await client.PostAsync(apiUrl, content);

                    if (response.IsSuccessStatusCode)
                    {
                        _logger.LogInformation($"BalanceSheet data sent successfully to Central Server (Status: {response.StatusCode}).");
                        return Ok();
                    }
                    else
                    {
                        _logger.LogError($"Error sending BalanceSheet data to Central Server. Status code: {response.StatusCode}, Content: {await response.Content.ReadAsStringAsync()}");
                        return StatusCode((int)response.StatusCode, $"Error: {response.ReasonPhrase}");
                    }
                }
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError($"HTTP Request Exception: {ex.Message}");
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
            catch (JsonException ex)
            {
                _logger.LogError($"JSON Serialization Exception: {ex.Message}");
                return BadRequest($"Invalid data format: {ex.Message}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"An unexpected error occurred: {ex.Message}");
                return StatusCode(500, "An unexpected error occurred.  See logs for details.");
            }
        }

        [HttpPost("PushPnL")]
        public async Task<IActionResult> PushPnL([FromBody] PnL pnl)
        {
            if (pnl == null)
            {
                _logger.LogError("PushPnL called with null data.");
                return BadRequest("PnL data cannot be null.");
            }

            try
            {
                using (HttpClient client = new HttpClient())
                {
                    var options = new JsonSerializerOptions
                    {
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                    };
                    string json = JsonSerializer.Serialize(pnl, options);
                    var content = new StringContent(json, Encoding.UTF8, "application/json");

                    string apiUrl = $"{_centralServerBaseUrl}/api/Data/ReceiveData?dataType=PnL";
                    _logger.LogInformation($"Sending PnL data to Central Server API: {apiUrl}");

                    HttpResponseMessage response = await client.PostAsync(apiUrl, content);

                    if (response.IsSuccessStatusCode)
                    {
                        _logger.LogInformation($"PnL data sent successfully to Central Server (Status: {response.StatusCode}).");
                        return Ok();
                    }
                    else
                    {
                        _logger.LogError($"Error sending PnL data to Central Server. Status code: {response.StatusCode}, Content: {await response.Content.ReadAsStringAsync()}");
                        return StatusCode((int)response.StatusCode, $"Error: {response.ReasonPhrase}");
                    }
                }
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError($"HTTP Request Exception: {ex.Message}");
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
            catch (JsonException ex)
            {
                _logger.LogError($"JSON Serialization Exception: {ex.Message}");
                return BadRequest($"Invalid data format: {ex.Message}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"An unexpected error occurred: {ex.Message}");
                return StatusCode(500, "An unexpected error occurred.  See logs for details.");
            }
        }

        [HttpPost("PushTaxItem")]
        public async Task<IActionResult> PushTaxItem([FromBody] TaxItem taxItem)
        {
            if (taxItem == null)
            {
                _logger.LogError("PushTaxItem called with null data.");
                return BadRequest("TaxItem data cannot be null.");
            }

            try
            {
                using (HttpClient client = new HttpClient())
                {
                    var options = new JsonSerializerOptions
                    {
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                    };
                    string json = JsonSerializer.Serialize(taxItem, options);
                    var content = new StringContent(json, Encoding.UTF8, "application/json");

                    string apiUrl = $"{_centralServerBaseUrl}/api/Data/ReceiveData?dataType=TaxItem";
                    _logger.LogInformation($"Sending TaxItem data to Central Server API: {apiUrl}");

                    HttpResponseMessage response = await client.PostAsync(apiUrl, content);

                    if (response.IsSuccessStatusCode)
                    {
                        _logger.LogInformation($"TaxItem data sent successfully to Central Server (Status: {response.StatusCode}).");
                        return Ok();
                    }
                    else
                    {
                        _logger.LogError($"Error sending TaxItem data to Central Server. Status code: {response.StatusCode}, Content: {await response.Content.ReadAsStringAsync()}");
                        return StatusCode((int)response.StatusCode, $"Error: {response.ReasonPhrase}");
                    }
                }
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError($"HTTP Request Exception: {ex.Message}");
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
            catch (JsonException ex)
            {
                _logger.LogError($"JSON Serialization Exception: {ex.Message}");
                return BadRequest($"Invalid data format: {ex.Message}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"An unexpected error occurred: {ex.Message}");
                return StatusCode(500, "An unexpected error occurred.  See logs for details.");
            }
        }

        // -------------------- HttpGet Actions --------------------
        [HttpGet("GetAsset")]
        public async Task<ActionResult<List<Asset>>> GetAsset()
        {
            System.Console.WriteLine("Calling GetAsset");
            try
            {
                System.Console.WriteLine("trying to GetAsset");

                using (HttpClient client = new HttpClient())
                {
                    System.Console.WriteLine("using http client in GetAsset");

                    string apiUrl = $"{_centralServerBaseUrl}/api/Data/GetData?dataType=Asset";
                    System.Console.WriteLine($"apiurl:{apiUrl}");

                    HttpResponseMessage response = await client.GetAsync(apiUrl);
                    System.Console.WriteLine($"response:{response.StatusCode}");
                    string tmp = await response.Content.ReadAsStringAsync();
                    System.Console.WriteLine($"response content:{tmp}");

                    if (response.IsSuccessStatusCode)
                    {
                        string json = await response.Content.ReadAsStringAsync();
                        JsonSerializerOptions options = new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true,
                        };
                        var results = JsonSerializer.Deserialize<List<Asset>>(json, options);
                        return results;
                    }
                    else
                    {
                        _logger.LogError($"An unexpected error occurred: {response.ReasonPhrase}");
                        return StatusCode(500, "An unexpected error occurred.  See logs for details.");
                    }
                }
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError($"HTTP Request Exception: {ex.Message}");
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
            catch (JsonException ex)
            {
                _logger.LogError($"JSON Serialization Exception: {ex.Message}");
                return BadRequest($"Invalid data format: {ex.Message}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"An unexpected error occurred: {ex.Message}");
                return StatusCode(500, "An unexpected error occurred.  See logs for details.");
            }
        }

        [HttpGet("GetBalanceSheet")]
        public async Task<ActionResult<List<BalanceSheet>>> GetBalanceSheet()
        {
            _logger.LogInformation("Calling GetBalanceSheet");
            try
            {
                using (HttpClient client = new HttpClient())
                {
                    string apiUrl = $"{_centralServerBaseUrl}/api/Data/GetData?dataType=BalanceSheet";

                    HttpResponseMessage response = await client.GetAsync(apiUrl);

                    if (response.IsSuccessStatusCode)
                    {
                        string json = await response.Content.ReadAsStringAsync();
                        JsonSerializerOptions options = new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true,
                        };
                        var results = JsonSerializer.Deserialize<List<BalanceSheet>>(json, options);
                        return results;
                    }
                    else
                    {
                        _logger.LogError($"An unexpected error occurred: {response.ReasonPhrase}");
                        return StatusCode(500, "An unexpected error occurred.  See logs for details.");
                    }
                }
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError($"HTTP Request Exception: {ex.Message}");
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
            catch (JsonException ex)
            {
                _logger.LogError($"JSON Serialization Exception: {ex.Message}");
                return BadRequest($"Invalid data format: {ex.Message}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"An unexpected error occurred: {ex.Message}");
                return StatusCode(500, "An unexpected error occurred.  See logs for details.");
            }
        }

        [HttpGet("GetPnL")]
        public async Task<ActionResult<List<PnL>>> GetPnL()
        {
            _logger.LogInformation("Calling GetPnL");
            try
            {
                using (HttpClient client = new HttpClient())
                {
                    string apiUrl = $"{_centralServerBaseUrl}/api/Data/GetData?dataType=PnL";

                    HttpResponseMessage response = await client.GetAsync(apiUrl);

                    if (response.IsSuccessStatusCode)
                    {
                        string json = await response.Content.ReadAsStringAsync();
                        JsonSerializerOptions options = new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true,
                        };
                        var results = JsonSerializer.Deserialize<List<PnL>>(json, options);
                        return results;
                    }
                    else
                    {
                        _logger.LogError($"An unexpected error occurred: {response.ReasonPhrase}");
                        return StatusCode(500, "An unexpected error occurred.  See logs for details.");
                    }
                }
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError($"HTTP Request Exception: {ex.Message}");
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
            catch (JsonException ex)
            {
                _logger.LogError($"JSON Serialization Exception: {ex.Message}");
                return BadRequest($"Invalid data format: {ex.Message}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"An unexpected error occurred: {ex.Message}");
                return StatusCode(500, "An unexpected error occurred.  See logs for details.");
            }
        }

        [HttpGet("GetTaxItem")]
        public async Task<ActionResult<List<TaxItem>>> GetTaxItem()
        {
            _logger.LogInformation("Calling GetTaxItem");
            try
            {
                using (HttpClient client = new HttpClient())
                {
                    string apiUrl = $"{_centralServerBaseUrl}/api/Data/GetData?dataType=TaxItem";

                    HttpResponseMessage response = await client.GetAsync(apiUrl);

                    if (response.IsSuccessStatusCode)
                    {
                        string json = await response.Content.ReadAsStringAsync();
                        JsonSerializerOptions options = new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true,
                        };
                        var results = JsonSerializer.Deserialize<List<TaxItem>>(json, options);
                        return results;
                    }
                    else
                    {
                        _logger.LogError($"An unexpected error occurred: {response.ReasonPhrase}");
                        return StatusCode(500, "An unexpected error occurred.  See logs for details.");
                    }
                }
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError($"HTTP Request Exception: {ex.Message}");
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
            catch (JsonException ex)
            {
                _logger.LogError($"JSON Serialization Exception: {ex.Message}");
                return BadRequest($"Invalid data format: {ex.Message}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"An unexpected error occurred: {ex.Message}");
                return StatusCode(500, "An unexpected error occurred.  See logs for details.");
            }
        }
        
    }
}
-e 
--- End of ./Controllers/FinanceController.cs ---

#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.
FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build

WORKDIR /app

COPY Finance.csproj ./

RUN dotnet restore Finance.csproj

COPY ./ ./

RUN dotnet build Finance.csproj -c Release -o out

RUN dotnet publish Finance.csproj -c Release -o out --no-restore

FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS runtime

WORKDIR /app
EXPOSE 80
EXPOSE 443

COPY --from=build /app/out ./

ENTRYPOINT ["dotnet", "Finance.dll"]
-e 
--- End of ./Dockerfile ---

<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="Microsoft.AspNetCore.SignalR.Client" />
    <None Remove="Data\" />
    <None Remove="Components\" />
    <None Remove="Controllers\" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.SignalR.Client" Version="5.0.17" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\SharedLibrary\SharedLibrary.csproj">
      <GlobalPropertiesToRemove></GlobalPropertiesToRemove>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Data\" />
    <Folder Include="Components\" />
    <Folder Include="Controllers\" />
  </ItemGroup>
</Project>
-e 
--- End of ./Finance.csproj ---

﻿using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Configuration;
using SharedLibrary.Data.Finance;

namespace Finance.Pages
{
    public partial class AssetManager
    {
        [Inject]
        HttpClient Http
        {
            get;
            set;
        }
        [Inject]
        IConfiguration Configuration
        {
            get;
            set;
        }

        private List<Asset> assets;
        private string financeBaseUrl;

        protected override async Task OnInitializedAsync()
        {
            financeBaseUrl = Configuration["CentralServerBaseUrl"];
            Console.WriteLine($"Finance is on: {Configuration["Finance:applicationUrl"]}");
            financeBaseUrl = "https://localhost:42442";
            try
            {
                assets = await Http.GetFromJsonAsync<List<Asset>>($"{financeBaseUrl}/api/Finance/GetAsset");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching assets: {ex.Message}");
                // Handle error (e.g., display an error message to the user)
                // You might want to display an error message in the UI instead of just logging to the console.
            }
        }
    }
}
-e 
--- End of ./Pages/AssetManager.cs ---

﻿@page "/assetmanager"

<h3>Asset Management</h3>

<table class="table">
    <thead>
        <tr>
            <th>Asset Name</th>
            <th>Acquisition Date</th>
            <th>Cost</th>
            <th>Running Costs</th>
            <th>Maintenance</th>
            <th>Depreciation</th>
            <th>PnL</th>
        </tr>
    </thead>
    <tbody>
        @if (assets != null)
        {
            @foreach (var asset in assets)
            {
                <tr>
                    <td>@asset.Name</td>
                    <td>@asset.AcquisitionDate.ToShortDateString()</td>
                    <td>@asset.Cost</td>
                    <td>@asset.RunningCosts</td>
                    <td>@asset.MaintenanceCosts</td>
                    <td>@asset.Depreciation</td>
                    <td>@asset.ProfitLoss</td>
                </tr>
            }
        }
    </tbody>
</table>

-e 
--- End of ./Pages/AssetManager.razor ---

﻿using System;

namespace Finance.Pages
{
    public partial class BalanceSheet
    {
        private SharedLibrary.Data.Finance.BalanceSheet balanceSheet = new();
    }
}
-e 
--- End of ./Pages/BalanceSheet.cs ---

﻿@page "/balancesheet"

<h3>Balance Sheet</h3>

<table class="table">
    <thead>
        <tr>
            <th>Category</th>
            <th>Amount</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Assets</td><td>@balanceSheet.Assets</td></tr>
        <tr><td>Liabilities</td><td>@balanceSheet.Liabilities</td></tr>
        <tr><td>Equity</td><td>@balanceSheet.Equity</td></tr>
    </tbody>
</table>
-e 
--- End of ./Pages/BalanceSheet.razor ---

﻿@page "/communication"
@inject CommunicationService CommunicationService

<h1>Department Communication</h1>

<div class="chat-container">
    <div class="message-list">
        @foreach (var message in messages)
        {
            <div class="@(message.SenderDepartment == _departmentName ? "sent" : "received")">
                <strong>@message.SenderDepartment:</strong> @message.MessageContent
            </div>
        }
    </div>

    <div class="input-area">
        <select @bind="selectedRecipient">
            <option value="@_departmentName">@_departmentName (Department Announcement)</option>
            <option value="Finance">Finance</option>
            <option value="HumanResources">Human Resources</option>
            <option value="Logistics">Logistics</option>
            <option value="CyberSecurity">CyberSecurity</option>
            <option value="Organization">Organization Announcement</option>
        </select>
        <textarea @bind="newMessage" placeholder="Enter your message"></textarea>
        <button @onclick="SendMessage">Send</button>
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; } = "Communication";

    private string _departmentName;
    private List<Message> messages = new List<Message>();
    private string newMessage;
    private string selectedRecipient = "";

    protected override async Task OnInitializedAsync()
    {
        _departmentName = CommunicationService.DepartmentName;
        CommunicationService.MessageReceived += HandleMessageReceived;
        await CommunicationService.StartConnection();
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessage))
        {
            MessageType messageType;
            string recipient = null;

            if (selectedRecipient == "Organization")
            {
                messageType = MessageType.OrganizationAnnouncement;
            }
            else if (selectedRecipient == _departmentName)
            {
                messageType = MessageType.DepartmentAnnouncement;
            }
            else
            {
                messageType = MessageType.CrossDepartment;
                recipient = selectedRecipient;
            }

            await CommunicationService.SendMessage(recipient, newMessage, messageType);
            newMessage = "";
        }
    }

    private void HandleMessageReceived(Message message)
    {
        messages.Add(message);
        StateHasChanged(); 
    }

    public async ValueTask DisposeAsync()
    {
        CommunicationService.MessageReceived -= HandleMessageReceived;
        await CommunicationService.DisposeAsync();
    }
}

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 500px; 
        border: 1px solid #ccc;
        overflow: hidden;
    }

    .message-list {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
    }

    .sent {
        background-color: #DCF8C6;
        padding: 5px;
        border-radius: 5px;
        margin-bottom: 5px;
        align-self: flex-end; /* Align to the right */
    }

    .received {
        background-color: #ECE5DD;
        padding: 5px;
        border-radius: 5px;
        margin-bottom: 5px;
        align-self: flex-start; /* Align to the left */
    }

    .input-area {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ccc;
    }

        .input-area textarea {
            flex-grow: 1;
            resize: none;
            border: 1px solid #ccc;
            padding: 5px;
        }

        .input-area button {
            margin-left: 10px;
        }
</style>-e 
--- End of ./Pages/Communication.razor ---

﻿@page
@model Finance.Pages.ErrorModel

<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>Error</title>
    <link href="~/css/bootstrap/bootstrap.min.css" rel="stylesheet" />
    <link href="~/css/app.css" rel="stylesheet" />
</head>

<body>
    <div class="main">
        <div class="content px-4">
            <h1 class="text-danger">Error.</h1>
            <h2 class="text-danger">An error occurred while processing your request.</h2>

            @if (Model.ShowRequestId)
            {
                <p>
                    <strong>Request ID:</strong> <code>@Model.RequestId</code>
                </p>
            }

            <h3>Development Mode</h3>
            <p>
                Swapping to the <strong>Development</strong> environment displays detailed information about the error that occurred.
            </p>
            <p>
                <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
                It can result in displaying sensitive information from exceptions to end users.
                For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
                and restarting the app.
            </p>
        </div>
    </div>
</body>

</html>
-e 
--- End of ./Pages/Error.cshtml ---

﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;

namespace Finance.Pages
{
    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    [IgnoreAntiforgeryToken]
    public class ErrorModel : PageModel
    {
        public string RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

        private readonly ILogger<ErrorModel> _logger;

        public ErrorModel(ILogger<ErrorModel> logger)
        {
            _logger = logger;
        }

        public void OnGet()
        {
            RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;
        }
    }
}
-e 
--- End of ./Pages/Error.cshtml.cs ---

﻿@page "/"

<h2>Finance Department Dashboard</h2>

-e 
--- End of ./Pages/Index.razor ---

﻿using System;
using SharedLibrary.Data.Finance;

namespace Finance.Pages
{
    public partial class PnLReport
    {
        private PnL pnl = new();

    }
}
-e 
--- End of ./Pages/PnLReport.cs ---

﻿@page "/pnlreport"

<h3>Profit & Loss Report</h3>

<table class="table">
    <thead>
        <tr>
            <th>Revenue</th>
            <th>Expenses</th>
            <th>Net Profit</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@pnl.Revenue</td>
            <td>@pnl.Expenses</td>
            <td>@pnl.NetProfit</td>
        </tr>
    </tbody>
</table>
-e 
--- End of ./Pages/PnLReport.razor ---

﻿using System;
using System.Collections.Generic;
using SharedLibrary.Data.Finance;

namespace Finance.Pages
{
    public partial class TaxManager
    {
        private List<TaxItem> taxItems = new();

    }
}
-e 
--- End of ./Pages/TaxManager.cs ---

﻿@page "/taxmanager"
 
<h3>Tax Management</h3>

<table class="table">
    <thead>
        <tr>
            <th>Item</th>
            <th>Projected Tax</th>
            <th>Due Date</th>
            <th>Tax Return</th>
            <th>Tax Exempt</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var taxItem in taxItems)
        {
            <tr>
                <td>@taxItem.Name</td>
                <td>@taxItem.ProjectedTax</td>
                <td>@taxItem.DueDate.ToShortDateString()</td>
                <td>@taxItem.TaxReturn</td>
                <td>@(taxItem.IsExempt ? "Yes" : "No")</td>
            </tr>
        }
    </tbody>
</table>

-e 
--- End of ./Pages/TaxManager.razor ---

﻿@page "/"
@namespace Finance.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Finance</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="Finance.styles.css" rel="stylesheet" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
</body>
</html>
-e 
--- End of ./Pages/_Host.cshtml ---

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace Finance
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}
-e 
--- End of ./Program.cs ---

{
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:27371",
      "sslPort": 44348
    }
  },
  "profiles": {
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "Finance": {
      "commandName": "Project",
      "launchBrowser": true,
      "applicationUrl": "https://localhost:42442;http://localhost:12831",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}-e 
--- End of ./Properties/launchSettings.json ---

﻿@inherits LayoutComponentBase

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
</div>
-e 
--- End of ./Shared/MainLayout.razor ---

﻿<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Finance</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="assetmanager">
                <span class="oi oi-home" aria-hidden="true"></span> Assert Manager
            </NavLink>
        </li>

        <li class="nav-item px-3">
            <NavLink class="nav-link" href="balancesheet">
                <span class="oi oi-home" aria-hidden="true"></span> Balance Sheet
            </NavLink>
        </li>

        <li class="nav-item px-3">
            <NavLink class="nav-link" href="taxmanager">
                <span class="oi oi-home" aria-hidden="true"></span> Tax Manager
            </NavLink>
        </li>

        <li class="nav-item px-3">
            <NavLink class="nav-link" href="pnlreport">
                <span class="oi oi-home" aria-hidden="true"></span> Profit and Loss Report
            </NavLink>
        </li>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
-e 
--- End of ./Shared/NavMenu.razor ---

﻿<div class="alert alert-secondary mt-4" role="alert">
    <span class="oi oi-pencil mr-2" aria-hidden="true"></span>
    <strong>@Title</strong>

    <span class="text-nowrap">
        Please take our
        <a target="_blank" class="font-weight-bold" href="https://go.microsoft.com/fwlink/?linkid=2137813">brief survey</a>
    </span>
    and tell us what you think.
</div>

@code {
    [Parameter]
    public string Title { get; set; }
}
-e 
--- End of ./Shared/SurveyPrompt.razor ---

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using SharedLibrary.Services;

namespace Finance
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            string departmentName = Configuration["DepartmentName"];
            services.AddRazorPages();
            services.AddScoped<HttpClient>();
            services.AddServerSideBlazor();
            services.AddSingleton(new CommunicationService(departmentName));
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapBlazorHub();
                endpoints.MapControllers();
                endpoints.MapFallbackToPage("/_Host");
            });
        }
    }
}
-e 
--- End of ./Startup.cs ---

﻿@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using SharedLibrary.Services
@using SharedLibrary.Data
@using SharedLibrary.Data.Finance
@using Microsoft.Extensions.Configuration
-e 
--- End of ./_Imports.razor ---

﻿{
  "DetailedErrors": true,
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  }
}
-e 
--- End of ./appsettings.Development.json ---

﻿{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "NetworkConfig": {
    "IPAddress": "127.0.3.1",
    "ChatIPAddress": "127.0.1.5",
    "Port": 5000
  },
  "CentralServerBaseUrl": "https://localhost:62690",
  "DepartmentName": "Finance"
}
-e 
--- End of ./appsettings.json ---

