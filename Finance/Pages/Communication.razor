@page "/communication"
@inject CommunicationService CommunicationService
@inject IConfiguration Configuration

<h1>Department Communication</h1>

<div class="chat-container">
    <div class="message-list">
        @foreach (var message in messages)
        {
            <div class="@(message.SenderDepartment == _departmentName ? "sent" : "received")">
                <strong>@message.SenderDepartment:</strong> @message.MessageContent
            </div>
        }
    </div>

    <div class="input-area">
        <select @bind="selectedRecipient">
            <option value="@_departmentName">@_departmentName (Department Announcement)</option>
            <option value="Finance">Finance</option>
            <option value="HumanResources">Human Resources</option>
            <option value="Logistics">Logistics</option>
            <option value="CyberSecurity">CyberSecurity</option>
            <option value="Organization">Organization Announcement</option>
        </select>
        <textarea @bind="newMessage" placeholder="Enter your message"></textarea>
        <button @onclick="SendMessage">Send</button>
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; } = "Communication";

    private string _departmentName;
    private List<Message> messages = new List<Message>();
    private string newMessage;
    private string selectedRecipient = "";

    // Use the injected Configuration (no need for underscore)
    protected override async Task OnInitializedAsync()
    {
        _departmentName = Configuration["DepartmentName"];
        CommunicationService.MessageReceived += HandleMessageReceived;
        await CommunicationService.StartConnection();
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessage))
        {
            MessageType messageType;
            string recipient = null;

            if (selectedRecipient == "Organization")
            {
                messageType = MessageType.OrganizationAnnouncement;
            }
            else if (selectedRecipient == _departmentName)
            {
                messageType = MessageType.DepartmentAnnouncement;
            }
            else
            {
                messageType = MessageType.CrossDepartment;
                recipient = selectedRecipient;
            }

            await CommunicationService.SendMessage(recipient, newMessage, messageType);
            newMessage = "";
        }
    }

    private void HandleMessageReceived(Message message)
    {
        messages.Add(message);
        StateHasChanged(); // Update the UI
    }

    public async ValueTask DisposeAsync()
    {
        CommunicationService.MessageReceived -= HandleMessageReceived;
        await CommunicationService.DisposeAsync();
    }
}

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 500px; /* Adjust as needed */
        border: 1px solid #ccc;
        overflow: hidden;
    }

    .message-list {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
    }

    .sent {
        background-color: #DCF8C6;
        padding: 5px;
        border-radius: 5px;
        margin-bottom: 5px;
        align-self: flex-end; /* Align to the right */
    }

    .received {
        background-color: #ECE5DD;
        padding: 5px;
        border-radius: 5px;
        margin-bottom: 5px;
        align-self: flex-start; /* Align to the left */
    }

    .input-area {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ccc;
    }

        .input-area textarea {
            flex-grow: 1;
            resize: none;
            border: 1px solid #ccc;
            padding: 5px;
        }

        .input-area button {
            margin-left: 10px;
        }
</style>