<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
-e 
--- End of ./App.razor ---

﻿@using SharedLibrary.Data.Logistics

<EditForm Model="@cost" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Date">Date:</label>
        <InputDate id="Date" class="form-control" @bind-Value="cost.Date" />
        <ValidationMessage For="@(() => cost.Date)" />
    </div>

    <div class="form-group">
        <label for="Description">Description:</label>
        <InputText id="Description" class="form-control" @bind-Value="cost.Description" />
        <ValidationMessage For="@(() => cost.Description)" />
    </div>

    <div class="form-group">
        <label for="Amount">Amount:</label>
        <InputNumber id="Amount" class="form-control" @bind-Value="cost.Amount" />
        <ValidationMessage For="@(() => cost.Amount)" />
    </div>

    <div class="form-group">
        <label for="Category">Category:</label>
        <InputText id="Category" class="form-control" @bind-Value="cost.Category" />
        <ValidationMessage For="@(() => cost.Category)" />
    </div>

    <button type="submit" class="btn btn-success">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="OnCancelClicked">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public CostLog Cost { get; set; } = new();

    [Parameter]
    public EventCallback<CostLog> OnCostCreated { get; set; }

    [Parameter]
    public EventCallback<CostLog> OnCostUpdated { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private CostLog cost = new();
    protected override void OnInitialized()
    {
        if (Cost != null)
        {
            cost = Cost;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (cost.CostLogId == 0)
        {
            await OnCostCreated.InvokeAsync(cost);
        }
        else
        {
            await OnCostUpdated.InvokeAsync(cost);
        }
    }

    private async Task OnCancelClicked()
    {
        await OnCancel.InvokeAsync();
    }
}-e 
--- End of ./Components/CostForm.razor ---

﻿@using SharedLibrary.Data.Logistics

<EditForm Model="@equipment" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Name">Name:</label>
        <InputText id="Name" class="form-control" @bind-Value="equipment.Name" />
        <ValidationMessage For="@(() => equipment.Name)" />
    </div>

    <div class="form-group">
        <label for="Type">Type:</label>
        <InputText id="Type" class="form-control" @bind-Value="equipment.Type" />
        <ValidationMessage For="@(() => equipment.Type)" />
    </div>

    <div class="form-group">
        <label for="Make">Make:</label>
        <InputText id="Make" class="form-control" @bind-Value="equipment.Make" />
        <ValidationMessage For="@(() => equipment.Make)" />
    </div>

    <div class="form-group">
        <label for="Model">Model:</label>
        <InputText id="Model" class="form-control" @bind-Value="equipment.Model" />
        <ValidationMessage For="@(() => equipment.Model)" />
    </div>

    <div class="form-group">
        <label for="NextServiceDate">Next Service Date:</label>
        <InputDate id="NextServiceDate" class="form-control" @bind-Value="equipment.NextServiceDate" />
        <ValidationMessage For="@(() => equipment.NextServiceDate)" />
    </div>

    <button type="submit" class="btn btn-success">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="OnCancelClicked">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public Equipment Equipment { get; set; } = new();

    [Parameter]
    public EventCallback<Equipment> OnEquipmentCreated { get; set; }

    [Parameter]
    public EventCallback<Equipment> OnEquipmentUpdated { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private Equipment equipment = new();
    protected override void OnInitialized()
    {
        if (Equipment != null)
        {
            equipment = Equipment;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (equipment.EquipmentId == 0)
        {
            await OnEquipmentCreated.InvokeAsync(equipment);
        }
        else
        {
            await OnEquipmentUpdated.InvokeAsync(equipment);
        }
    }

    private async Task OnCancelClicked()
    {
        await OnCancel.InvokeAsync();
    }
}-e 
--- End of ./Components/EquipmentForm.razor ---

﻿@using SharedLibrary.Data.Logistics

<EditForm Model="@fuelLog" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Date">Date:</label>
        <InputDate id="Date" class="form-control" @bind-Value="fuelLog.Date" />
        <ValidationMessage For="@(() => fuelLog.Date)" />
    </div>

    <div class="form-group">
        <label for="EquipmentId">Equipment:</label>
        <InputNumber id="EquipmentId" class="form-control" @bind-Value="fuelLog.EquipmentId" />
        <ValidationMessage For="@(() => fuelLog.EquipmentId)" />
    </div>

    <div class="form-group">
        <label for="LitersFilled">Liters Filled:</label>
        <InputNumber id="LitersFilled" class="form-control" @bind-Value="fuelLog.LitersFilled" />
        <ValidationMessage For="@(() => fuelLog.LitersFilled)" />
    </div>

    <div class="form-group">
        <label for="Cost">Cost:</label>
        <InputNumber id="Cost" class="form-control" @bind-Value="fuelLog.Cost" />
        <ValidationMessage For="@(() => fuelLog.Cost)" />
    </div>

    <div class="form-group">
        <label for="OdometerReading">Odometer Reading:</label>
        <InputNumber id="OdometerReading" class="form-control" @bind-Value="fuelLog.OdometerReading" />
        <ValidationMessage For="@(() => fuelLog.OdometerReading)" />
    </div>

    <button type="submit" class="btn btn-success">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="OnCancelClicked">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public FuelLog FuelLog { get; set; } = new();

    [Parameter]
    public EventCallback<FuelLog> OnFuelCreated { get; set; }

    [Parameter]
    public EventCallback<FuelLog> OnFuelUpdated { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private FuelLog fuelLog = new();
    protected override void OnInitialized()
    {
        if (FuelLog != null)
        {
            fuelLog = FuelLog;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (fuelLog.FuelLogId == 0)
        {
            await OnFuelCreated.InvokeAsync(fuelLog);
        }
        else
        {
            await OnFuelUpdated.InvokeAsync(fuelLog);
        }
    }

    private async Task OnCancelClicked()
    {
        await OnCancel.InvokeAsync();
    }
}-e 
--- End of ./Components/FuelForm.razor ---

﻿@using SharedLibrary.Data.Logistics

<EditForm Model="@shipment" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="ShipmentNumber">Shipment Number:</label>
        <InputText id="ShipmentNumber" class="form-control" @bind-Value="shipment.ShipmentNumber" />
        <ValidationMessage For="@(() => shipment.ShipmentNumber)" />
    </div>

    <div class="form-group">
        <label for="Origin">Origin:</label>
        <InputText id="Origin" class="form-control" @bind-Value="shipment.Origin" />
        <ValidationMessage For="@(() => shipment.Origin)" />
    </div>

    <div class="form-group">
        <label for="Destination">Destination:</label>
        <InputText id="Destination" class="form-control" @bind-Value="shipment.Destination" />
        <ValidationMessage For="@(() => shipment.Destination)" />
    </div>

    <div class="form-group">
        <label for="ExpectedDeliveryDate">Expected Delivery Date:</label>
        <InputDate id="ExpectedDeliveryDate" class="form-control" @bind-Value="shipment.ExpectedDeliveryDate" />
        <ValidationMessage For="@(() => shipment.ExpectedDeliveryDate)" />
    </div>

    <div class="form-group">
        <label for="CurrentStatus">Current Status:</label>
        <InputText id="CurrentStatus" class="form-control" @bind-Value="shipment.CurrentStatus" />
        <ValidationMessage For="@(() => shipment.CurrentStatus)" />
    </div>

    <button type="submit" class="btn btn-success">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="OnCancelClicked">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public Shipment Shipment { get; set; } = new();

    [Parameter]
    public EventCallback<Shipment> OnShipmentCreated { get; set; }

    [Parameter]
    public EventCallback<Shipment> OnShipmentUpdated { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private Shipment shipment = new();
    protected override void OnInitialized()
    {
        if (Shipment != null)
        {
            shipment = Shipment;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (shipment.ShipmentId == 0)
        {
            await OnShipmentCreated.InvokeAsync(shipment);
        }
        else
        {
            await OnShipmentUpdated.InvokeAsync(shipment);
        }
    }

    private async Task OnCancelClicked()
    {
        await OnCancel.InvokeAsync();
    }
}-e 
--- End of ./Components/ShipmentForm.razor ---

﻿using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using SharedLibrary.Abstract;
using SharedLibrary.Interfaces.Logistics; // Logistics Interfaces
using SharedLibrary.Data.Logistics;
//using Logistics.Adapters; // Logistics Adapters
using Microsoft.Extensions.Configuration;
using System.Net.Http;
using System.Text.Json;
using System.Text;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Logistics.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class LogisticsController : Controller
    {
        private readonly ILogger<LogisticsController> _logger;
        private readonly string _centralServerBaseUrl;

        public LogisticsController(IConfiguration configuration, ILogger<LogisticsController> logger)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _centralServerBaseUrl = configuration["CentralServerBaseUrl"];
        }

        // -------------------- HttpPost Actions --------------------

        [HttpPost("PushShipment")]
        public async Task<IActionResult> PushShipment([FromBody] Shipment shipment)
        {
            if (shipment == null)
            {
                _logger.LogError("PushShipment called with null data.");
                return BadRequest("Shipment data cannot be null.");
            }

            try
            {
                using (HttpClient client = new HttpClient())
                {
                    // Serialize the object to JSON.  Use camelCase.
                    var options = new JsonSerializerOptions
                    {
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                    };
                    string json = JsonSerializer.Serialize(shipment, options);
                    var content = new StringContent(json, Encoding.UTF8, "application/json");

                    string apiUrl = $"{_centralServerBaseUrl}/api/Data/ReceiveData?dataType=Shipment";
                    _logger.LogInformation($"Sending Shipment data to Central Server API: {apiUrl}");

                    HttpResponseMessage response = await client.PostAsync(apiUrl, content);

                    if (response.IsSuccessStatusCode)
                    {
                        _logger.LogInformation($"Shipment data sent successfully to Central Server (Status: {response.StatusCode}).");
                        return Ok();
                    }
                    else
                    {
                        _logger.LogError($"Error sending Shipment data to Central Server. Status code: {response.StatusCode}, Content: {await response.Content.ReadAsStringAsync()}");
                        return StatusCode((int)response.StatusCode, $"Error: {response.ReasonPhrase}");
                    }
                }
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError($"HTTP Request Exception: {ex.Message}");
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
            catch (JsonException ex)
            {
                _logger.LogError($"JSON Serialization Exception: {ex.Message}");
                return BadRequest($"Invalid data format: {ex.Message}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"An unexpected error occurred: {ex.Message}");
                return StatusCode(500, "An unexpected error occurred.  See logs for details.");
            }
        }

        

        // -------------------- HttpGet Actions --------------------
        [HttpGet("GetShipment")]
        public async Task<ActionResult<List<Shipment>>> GetShipment()
        {
            _logger.LogInformation("Calling GetShipment");
            try
            {
                // Example
                using (HttpClient client = new HttpClient())
                {
                    string apiUrl = $"{_centralServerBaseUrl}/api/Data/GetData?dataType=Shipment";

                    HttpResponseMessage response = await client.GetAsync(apiUrl);

                    if (response.IsSuccessStatusCode)
                    {
                        string json = await response.Content.ReadAsStringAsync();
                        JsonSerializerOptions options = new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true, // Ignore case differences
                        };
                        var results = JsonSerializer.Deserialize<List<Shipment>>(json, options);
                        return results;
                    }
                    else
                    {
                        _logger.LogError($"An unexpected error occurred: {response.ReasonPhrase}");
                        return StatusCode(500, "An unexpected error occurred.  See logs for details.");
                    }
                }
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError($"HTTP Request Exception: {ex.Message}");
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
            catch (JsonException ex)
            {
                _logger.LogError($"JSON Serialization Exception: {ex.Message}");
                return BadRequest($"Invalid data format: {ex.Message}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"An unexpected error occurred: {ex.Message}");
                return StatusCode(500, "An unexpected error occurred.  See logs for details.");
            }
        }

        
    }
}
-e 
--- End of ./Controllers/LogisticsController.cs ---

#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.
FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build

WORKDIR /app

COPY Logistics.csproj ./

RUN dotnet restore Logistics.csproj

COPY ./ ./

RUN dotnet build Logistics.csproj -c Release -o out

RUN dotnet publish Logistics.csproj -c Release -o out --no-restore

FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS runtime

WORKDIR /app
EXPOSE 80
EXPOSE 443

COPY --from=build /app/out ./

ENTRYPOINT ["dotnet", "Logistics.dll"]
-e 
--- End of ./Dockerfile ---

<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="Microsoft.AspNetCore.SignalR.Client" />
    <None Remove="Data\" />
    <None Remove="Components\" />
    <None Remove="Controllers\" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.SignalR.Client" Version="5.0.17" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\SharedLibrary\SharedLibrary.csproj">
      <GlobalPropertiesToRemove></GlobalPropertiesToRemove>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Data\" />
    <Folder Include="Components\" />
    <Folder Include="Controllers\" />
  </ItemGroup>
</Project>
-e 
--- End of ./Logistics.csproj ---

﻿@page "/communication"
@inject CommunicationService CommunicationService

@implements IAsyncDisposable

<h1>Department Communication</h1>

<div class="chat-container">
    <div class="message-list">
        @foreach (var message in messages)
        {
            <div class="@(message.SenderDepartment == _departmentName ? "sent" : "received")">
                <strong>@message.SenderDepartment:</strong> @message.MessageContent
            </div>
        }
    </div>

    <div class="input-area">
        <select @bind="selectedRecipient">
            <option value="@_departmentName">@_departmentName (Department Announcement)</option>
            <option value="Finance">Finance</option>
            <option value="HumanResources">Human Resources</option>
            <option value="Logistics">Logistics</option>
            <option value="CyberSecurity">CyberSecurity</option>
            <option value="Organization">Organization Announcement</option>
        </select>
        <textarea @bind="newMessage" placeholder="Enter your message"></textarea>
        <button @onclick="SendMessage">Send</button>
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; } = "Communication";

    private string _departmentName;
    private List<Message> messages = new List<Message>();
    private string newMessage;
    private string selectedRecipient = "";

    protected override async Task OnInitializedAsync()
    {
        _departmentName = CommunicationService.DepartmentName;
        CommunicationService.MessageReceived += HandleMessageReceived;
        await CommunicationService.StartConnection();
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessage))
        {
            MessageType messageType;
            string recipient = null;

            if (selectedRecipient == "Organization")
            {
                messageType = MessageType.OrganizationAnnouncement;
            }
            else if (selectedRecipient == _departmentName)
            {
                messageType = MessageType.DepartmentAnnouncement;
            }
            else
            {
                messageType = MessageType.CrossDepartment;
                recipient = selectedRecipient;
            }

            await CommunicationService.SendMessage(recipient, newMessage, messageType);
            newMessage = "";
        }
    }

    private void HandleMessageReceived(Message message)
    {
        messages.Add(message);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        CommunicationService.MessageReceived -= HandleMessageReceived;
        await CommunicationService.DisposeAsync();
    }
}

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 500px; 
        border: 1px solid #ccc;
        overflow: hidden;
    }

    .message-list {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
    }

    .sent {
        background-color: #DCF8C6;
        padding: 5px;
        border-radius: 5px;
        margin-bottom: 5px;
        align-self: flex-end; /* Align to the right */
    }

    .received {
        background-color: #ECE5DD;
        padding: 5px;
        border-radius: 5px;
        margin-bottom: 5px;
        align-self: flex-start; /* Align to the left */
    }

    .input-area {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ccc;
    }

        .input-area textarea {
            flex-grow: 1;
            resize: none;
            border: 1px solid #ccc;
            padding: 5px;
        }

        .input-area button {
            margin-left: 10px;
        }
</style>-e 
--- End of ./Pages/Communication.razor ---

﻿@page "/costs"

<div class="container">
    <h2>Cost Logging</h2>

    <button class="btn btn-primary mb-3" @onclick="ShowCreateForm">Add Cost</button>

    @if (showCreateForm)
    {
        <CostForm OnCostCreated="AddCost" OnCancel="HideCreateForm" />
    }

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Description</th>
                <th>Amount</th>
                <th>Category</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cost in costs)
            {
                <tr>
                    <td>@cost.Date.ToShortDateString()</td>
                    <td>@cost.Description</td>
                    <td>@cost.Amount</td>
                    <td>@cost.Category</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => ShowEditForm(cost)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteCost(cost)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (showEditForm)
    {
        <div class="modal fade show" id="editCostModal" tabindex="-1" role="dialog" style="display:block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Cost</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideEditForm">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <CostForm Cost="selectedCost" OnCostUpdated="UpdateCost" OnCancel="HideEditForm" />
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private List<CostLog> costs = new List<CostLog>(); // Replace with data fetching

    private bool showCreateForm = false;
    private bool showEditForm = false;
    private CostLog selectedCost;

    protected override void OnInitialized()
    {
        //LoadCosts(); // Fetch from a service or database
        costs = GetCosts(); //dummy data
    }
    private List<CostLog> GetCosts()
    {
        //dummy data
        return new List<CostLog>()
{
            new CostLog()
            {
                Date = DateTime.Now,
                Description = "Fuel Purchase",
                Amount = 100,
                Category = "Fuel"
            },
             new CostLog()
            {
                Date = DateTime.Now,
                Description = "Truck Repair",
                Amount = 250,
                Category = "Maintenance"
            }
        };
    }

    private void ShowCreateForm()
    {
        showCreateForm = true;
    }

    private void HideCreateForm()
    {
        showCreateForm = false;
    }

    private void ShowEditForm(CostLog cost)
    {
        selectedCost = cost;
        showEditForm = true;
    }

    private void HideEditForm()
    {
        showEditForm = false;
        selectedCost = null;
    }

    private void AddCost(CostLog newCost)
    {
        costs.Add(newCost);
        HideCreateForm();
        // Optionally: Show a success notification
    }

    private void UpdateCost(CostLog updatedCost)
    {
        var existingCost = costs.FirstOrDefault(e => e.CostLogId == updatedCost.CostLogId); // Assuming Cost has an ID
        if (existingCost != null)
        {
            // Update properties of existingEmployee with updatedEmployee
            existingCost.Date = updatedCost.Date;
            existingCost.Description = updatedCost.Description;
            existingCost.Amount = updatedCost.Amount;
            existingCost.Category = updatedCost.Category;
        }
        HideEditForm();
        // Optionally: Show a success notification
    }

    private void DeleteCost(CostLog costToDelete)
    {
        costs.Remove(costToDelete);
        // Optionally: Show a success notification
    }
}-e 
--- End of ./Pages/Costs.razor ---

﻿@page "/equipment"

<div class="container">
    <h2>Equipment Management</h2>

    <button class="btn btn-primary mb-3" @onclick="ShowCreateForm">Add Equipment</button>

    @if (showCreateForm)
    {
        <Logistics.Components.EquipmentForm OnEquipmentCreated="AddEquipment" OnCancel="HideCreateForm" />
    }

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Make</th>
                <th>Model</th>
                <th>Next Service Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var equipment in equipments)
            {
                <tr>
                    <td>@equipment.Name</td>
                    <td>@equipment.Type</td>
                    <td>@equipment.Make</td>
                    <td>@equipment.Model</td>
                    <td>@equipment.NextServiceDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => ShowEditForm(equipment)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteEquipment(equipment)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (showEditForm)
    {
        <div class="modal fade show" id="editEquipmentModal" tabindex="-1" role="dialog" style="display:block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Equipment</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideEditForm">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <Logistics.Components.EquipmentForm Equipment="selectedEquipment" OnEquipmentUpdated="UpdateEquipment" OnCancel="HideEditForm" />
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private List<SharedLibrary.Data.Logistics.Equipment> equipments = new List<SharedLibrary.Data.Logistics.Equipment>(); 

    private bool showCreateForm = false;
    private bool showEditForm = false;
    private SharedLibrary.Data.Logistics.Equipment selectedEquipment;

    protected override void OnInitialized()
    {
        equipments = GetEquipment();
    }
    private List<SharedLibrary.Data.Logistics.Equipment> GetEquipment()
    {
        return new List<SharedLibrary.Data.Logistics.Equipment>()
    {
            new SharedLibrary.Data.Logistics.Equipment()
            {
                Name = "Bus 1",
                Type = "Bus",
                Make = "Volvo",
                Model = "X100",
                NextServiceDate = DateTime.Now
            },
            new SharedLibrary.Data.Logistics.Equipment()
            {
                Name = "Forklift 1",
                Type = "Forklift",
                Make = "Caterpillar",
                Model = "FL200",
                NextServiceDate = DateTime.Now
            }
        };
    }

    private void ShowCreateForm()
    {
        showCreateForm = true;
    }

    private void HideCreateForm()
    {
        showCreateForm = false;
    }

    private void ShowEditForm(SharedLibrary.Data.Logistics.Equipment equipment)
    {
        selectedEquipment = equipment;
        showEditForm = true;
    }

    private void HideEditForm()
    {
        showEditForm = false;
        selectedEquipment = null;
    }

    private void AddEquipment(SharedLibrary.Data.Logistics.Equipment newEquipment)
    {
        equipments.Add(newEquipment);
        HideCreateForm();
    }

    private void UpdateEquipment(SharedLibrary.Data.Logistics.Equipment updatedEquipment)
    {
        var existingEquipment = equipments.FirstOrDefault(e => e.EquipmentId == updatedEquipment.EquipmentId); 
        if (existingEquipment != null)
        {
            existingEquipment.Name = updatedEquipment.Name;
            existingEquipment.Type = updatedEquipment.Type;
            existingEquipment.Make = updatedEquipment.Make;
            existingEquipment.Model = updatedEquipment.Model;
            existingEquipment.NextServiceDate = updatedEquipment.NextServiceDate;
        }
        HideEditForm();
    }

    private void DeleteEquipment(SharedLibrary.Data.Logistics.Equipment equipmentToDelete)
    {
        equipments.Remove(equipmentToDelete);
    }
}-e 
--- End of ./Pages/Equipment.razor ---

﻿@page
@model Logistics.Pages.ErrorModel

<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>Error</title>
    <link href="~/css/bootstrap/bootstrap.min.css" rel="stylesheet" />
    <link href="~/css/app.css" rel="stylesheet" />
</head>

<body>
    <div class="main">
        <div class="content px-4">
            <h1 class="text-danger">Error.</h1>
            <h2 class="text-danger">An error occurred while processing your request.</h2>

            @if (Model.ShowRequestId)
            {
                <p>
                    <strong>Request ID:</strong> <code>@Model.RequestId</code>
                </p>
            }

            <h3>Development Mode</h3>
            <p>
                Swapping to the <strong>Development</strong> environment displays detailed information about the error that occurred.
            </p>
            <p>
                <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
                It can result in displaying sensitive information from exceptions to end users.
                For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
                and restarting the app.
            </p>
        </div>
    </div>
</body>

</html>
-e 
--- End of ./Pages/Error.cshtml ---

﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;

namespace Logistics.Pages
{
    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    [IgnoreAntiforgeryToken]
    public class ErrorModel : PageModel
    {
        public string RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

        private readonly ILogger<ErrorModel> _logger;

        public ErrorModel(ILogger<ErrorModel> logger)
        {
            _logger = logger;
        }

        public void OnGet()
        {
            RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;
        }
    }
}
-e 
--- End of ./Pages/Error.cshtml.cs ---

﻿@page "/fuel"

<div class="container">
    <h2>Fuel Logging</h2>

    <button class="btn btn-primary mb-3" @onclick="ShowCreateForm">Add Fuel Log</button>

    @if (showCreateForm)
    {
        <FuelForm OnFuelCreated="AddFuel" OnCancel="HideCreateForm" />
    }

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Equipment</th>
                <th>Liters</th>
                <th>Cost</th>
                <th>Odometer</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var fuelLog in fuelLogs)
            {
                <tr>
                    <td>@fuelLog.Date.ToShortDateString()</td>
                    <td>@fuelLog.EquipmentId</td>
                    <td>@fuelLog.LitersFilled</td>
                    <td>@fuelLog.Cost</td>
                    <td>@fuelLog.OdometerReading</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => ShowEditForm(fuelLog)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteFuel(fuelLog)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (showEditForm)
    {
        <div class="modal fade show" id="editFuelModal" tabindex="-1" role="dialog" style="display:block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Fuel Log</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideEditForm">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <FuelForm FuelLog="selectedFuelLog" OnFuelUpdated="UpdateFuel" OnCancel="HideEditForm" />
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private List<FuelLog> fuelLogs = new List<FuelLog>(); // Replace with data fetching

    private bool showCreateForm = false;
    private bool showEditForm = false;
    private FuelLog selectedFuelLog;

    protected override void OnInitialized()
    {        //LoadFuelLogs(); // Fetch from a service or database
        fuelLogs = GetFuelLogs(); //dummy data
    }
    private List<FuelLog> GetFuelLogs()
    {
        //dummy data
        return new List<FuelLog>()
    {
            new FuelLog()
            {
                Date = DateTime.Now,
                EquipmentId = 1,
                LitersFilled = 50,
                Cost = 75,
                OdometerReading = 10000
            },
             new FuelLog()
            {
                Date = DateTime.Now,
                EquipmentId = 2,
                LitersFilled = 60,
                Cost = 90,
                OdometerReading = 5000
            }
        };
    }

    private void ShowCreateForm()
    {
        showCreateForm = true;
    }

    private void HideCreateForm()
    {
        showCreateForm = false;
    }

    private void ShowEditForm(FuelLog fuelLog)
    {
        selectedFuelLog = fuelLog;
        showEditForm = true;
    }

    private void HideEditForm()
    {
        showEditForm = false;
        selectedFuelLog = null;
    }

    private void AddFuel(FuelLog newFuel)
    {
        fuelLogs.Add(newFuel);
        HideCreateForm();
        // Optionally: Show a success notification
    }

    private void UpdateFuel(FuelLog updatedFuel)
    {
        var existingFuel = fuelLogs.FirstOrDefault(e => e.FuelLogId == updatedFuel.FuelLogId); // Assuming FuelLog has an ID
        if (existingFuel != null)
        {
            // Update properties of existingEmployee with updatedEmployee
            existingFuel.Date = updatedFuel.Date;
            existingFuel.EquipmentId = updatedFuel.EquipmentId;
            existingFuel.LitersFilled = updatedFuel.LitersFilled;
            existingFuel.Cost = updatedFuel.Cost;
            existingFuel.OdometerReading = updatedFuel.OdometerReading;
        }
        HideEditForm();
        // Optionally: Show a success notification
    }

    private void DeleteFuel(FuelLog fuelToDelete)
    {
        fuelLogs.Remove(fuelToDelete);
        // Optionally: Show a success notification
    }
}-e 
--- End of ./Pages/Fuel.razor ---

﻿@page "/"

<div class="container-fluid">
    <h2>Logistics Dashboard</h2>

    <div class="row">
        <div class="col-md-4">
            <div class="card bg-light mb-3">
                <div class="card-header">Shipments in Transit</div>
                <div class="card-body">
                    <h4 class="card-title">@shipmentsInTransit</h4>
                    <p class="card-text">Number of shipments currently in transit.</p>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card bg-light mb-3">
                <div class="card-header">Equipment Due for Service</div>
                <div class="card-body">
                    <h4 class="card-title">@equipmentDueForService</h4>
                    <p class="card-text">Number of equipment items due for service.</p>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card bg-light mb-3">
                <div class="card-header">Total Logistics Costs (Last Month)</div>
                <div class="card-body">
                    <h4 class="card-title">$@totalCostsLastMonth</h4>
                    <p class="card-text">Total logistics-related expenses for the past month.</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="card bg-light mb-3">
                <div class="card-header">Average Fuel Consumption (This Week)</div>
                <div class="card-body">
                    <h4 class="card-title">@averageFuelConsumption Litres</h4>
                    <p class="card-text">Average fuel consumption by all equipment items for this week.</p>
                </div>
            </div>
        </div>
    </div>

    <h3>Quick Actions</h3>
    <ul>
        <li><a href="/shipments">Manage Shipments</a></li>
        <li><a href="/equipment">Manage Equipment</a></li>
        <li><a href="/costs">Log New Costs</a></li>
        <li><a href="/fuel">Log Fuel Consumption</a></li>
    </ul>
</div>

@code {
    private int shipmentsInTransit = 0;
    private int equipmentDueForService = 0;
    private decimal totalCostsLastMonth = 0;
    private decimal averageFuelConsumption = 0;

    protected override async Task OnInitializedAsync()
    {
        // Load data from your services or database here
        shipmentsInTransit = await GetShipmentsInTransitCount();
        equipmentDueForService = await GetEquipmentDueForServiceCount();
        totalCostsLastMonth = await GetTotalCostsLastMonth();
        averageFuelConsumption = await GetAverageFuelConsumptionThisWeek();
    }

    // Placeholder methods to fetch data (replace with your actual data access logic)
    private async Task<int> GetShipmentsInTransitCount()
    {
        // Replace with your data fetching logic
        return 15;
    }

    private async Task<int> GetEquipmentDueForServiceCount()
    {
        // Replace with your data fetching logic
        return 2;
    }

    private async Task<decimal> GetTotalCostsLastMonth()
    {
        // Replace with your data fetching logic
        return 5000.00m;
    }

    private async Task<decimal> GetAverageFuelConsumptionThisWeek()
    {
        // Replace with your data fetching logic
        return 50.50m;
    }
}-e 
--- End of ./Pages/Index.razor ---

﻿@page "/reports"

<div class="container">
    <h2>Logistics Reports</h2>

    <p>Select a report to generate:</p>

    <ul>
        <li>
            <button class="btn btn-link" @onclick="GenerateShipmentReport">Shipment Status Report</button>
        </li>
        <li>
            <button class="btn btn-link" @onclick="GenerateEquipmentMaintenanceReport">Equipment Maintenance Report</button>
        </li>
        <li>
            <button class="btn btn-link" @onclick="GenerateCostSummaryReport">Cost Summary Report</button>
        </li>
        <li>
            <button class="btn btn-link" @onclick="GenerateFuelConsumptionReport">Fuel Consumption Report</button>
        </li>
    </ul>

    @if (!string.IsNullOrEmpty(reportContent))
    {
        <h3>Report Output:</h3>
        <pre>@reportContent</pre>
    }
</div>

@code {
    private string reportContent = "";

    private async Task GenerateShipmentReport()
    {
        // In a real application, you would fetch data from a service,
        // process it, and generate a formatted report string.
        reportContent = "Shipment Status Report (Example):\n" +
                         "----------------------------------\n" +
                         "Total Shipments: 100\n" +
                         "Shipments In Transit: 25\n" +
                         "Shipments Delivered: 70\n" +
                         "Shipments Delayed: 5";
    }

    private async Task GenerateEquipmentMaintenanceReport()
    {
        // Fetch equipment data and generate a report.
        reportContent = "Equipment Maintenance Report (Example):\n" +
                         "--------------------------------------\n" +
                         "Equipment Due for Service: 3\n" +
                         "Average Service Cost: $500";
    }

    private async Task GenerateCostSummaryReport()
    {
        // Generate a report summarizing costs.
        reportContent = "Cost Summary Report (Example):\n" +
                         "-------------------------------\n" +
                         "Total Fuel Costs: $10,000\n" +
                         "Total Maintenance Costs: $5,000\n" +
                         "Total Shipping Costs: $2,000";
    }

    private async Task GenerateFuelConsumptionReport()
    {
        // Generate a report summarizing fuel consumption
        reportContent = "Fuel Consumption Report (Example):\n" +
                         "-------------------------------\n" +
                         "Total Fuel Consumed: 5000 Litres\n" +
                         "Fuel Cost: $7500\n" +
                         "Average Fuel Consumption per Equipment: 100 Litres";
    }
}-e 
--- End of ./Pages/Reports.razor ---

﻿@page "/shipments"

<div class="container">
    <h2>Shipment Management</h2>

    <button class="btn btn-primary mb-3" @onclick="ShowCreateForm">Add Shipment</button>

    @if (showCreateForm)
    {
        <ShipmentForm OnShipmentCreated="AddShipment" OnCancel="HideCreateForm" />
    }

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Shipment Number</th>
                <th>Origin</th>
                <th>Destination</th>
                <th>Expected Delivery</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var shipment in shipments)
            {
                <tr>
                    <td>@shipment.ShipmentNumber</td>
                    <td>@shipment.Origin</td>
                    <td>@shipment.Destination</td>
                    <td>@shipment.ExpectedDeliveryDate.ToShortDateString()</td>
                    <td>@shipment.CurrentStatus</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => ShowEditForm(shipment)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteShipment(shipment)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (showEditForm)
    {
        <div class="modal fade show" id="editShipmentModal" tabindex="-1" role="dialog" style="display:block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Shipment</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideEditForm">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <ShipmentForm Shipment="selectedShipment" OnShipmentUpdated="UpdateShipment" OnCancel="HideEditForm" />
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private List<Shipment> shipments = new List<Shipment>();

    private bool showCreateForm = false; private bool showEditForm = false;
    private Shipment selectedShipment;

    protected override void OnInitialized()
    {
        shipments = GetShipments();
    }
    private List<Shipment> GetShipments()
    {
        //dummy data
        return new List<Shipment>()
    {
            new Shipment()
            {
                ShipmentNumber = "1234",
                Origin = "Location 1",
                Destination = "Location 2",
                ExpectedDeliveryDate = DateTime.Now,
                CurrentStatus = "Pending"
            },
             new Shipment()
            {
                ShipmentNumber = "5678",
                Origin = "Location 3",
                Destination = "Location 4",
                ExpectedDeliveryDate = DateTime.Now,
                CurrentStatus = "Pending"
            }
        };
    }

    private void ShowCreateForm()
    {
        showCreateForm = true;
    }

    private void HideCreateForm()
    {
        showCreateForm = false;
    }

    private void ShowEditForm(Shipment shipment)
    {
        selectedShipment = shipment;
        showEditForm = true;
    }

    private void HideEditForm()
    {
        showEditForm = false;
        selectedShipment = null;
    }

    private void AddShipment(Shipment newShipment)
    {
        shipments.Add(newShipment);
        HideCreateForm();
    }

    private void UpdateShipment(Shipment updatedShipment)
    {
        var existingShipment = shipments.FirstOrDefault(e => e.ShipmentId == updatedShipment.ShipmentId);
        if (existingShipment != null)
        {
            existingShipment.ShipmentNumber = updatedShipment.ShipmentNumber;
            existingShipment.Origin = updatedShipment.Origin;
            existingShipment.Destination = updatedShipment.Destination;
            existingShipment.ExpectedDeliveryDate = updatedShipment.ExpectedDeliveryDate;
            existingShipment.CurrentStatus = updatedShipment.CurrentStatus;
        }
        HideEditForm();
    }

    private void DeleteShipment(Shipment shipmentToDelete)
    {
        shipments.Remove(shipmentToDelete);
    }
}-e 
--- End of ./Pages/Shipments.razor ---

﻿@page "/"
@namespace Logistics.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Logistics</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="Logistics.styles.css" rel="stylesheet" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
</body>
</html>
-e 
--- End of ./Pages/_Host.cshtml ---

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace Logistics
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}
-e 
--- End of ./Program.cs ---

{
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:37949",
      "sslPort": 44382
    }
  },
  "profiles": {
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "Logistics": {
      "commandName": "Project",
      "launchBrowser": true,
      "applicationUrl": "https://localhost:57238;http://localhost:39782",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}-e 
--- End of ./Properties/launchSettings.json ---

﻿@inherits LayoutComponentBase

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
</div>
-e 
--- End of ./Shared/MainLayout.razor ---

﻿
<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Logistics</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-dashboard" aria-hidden="true"></span> Dashboard
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="shipments">
                <span class="oi oi-box" aria-hidden="true"></span> Shipments
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="equipment">
                <span class="oi oi-wrench" aria-hidden="true"></span> Equipment
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="costs">
                <span class="oi oi-credit-card" aria-hidden="true"></span> Costs
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="fuel">
                <span class="oi oi-fuel" aria-hidden="true"></span> Fuel
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="reports">
                <span class="oi oi-document" aria-hidden="true"></span> Reports
            </NavLink>
        </li>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}-e 
--- End of ./Shared/NavMenu.razor ---

﻿<div class="alert alert-secondary mt-4" role="alert">
    <span class="oi oi-pencil mr-2" aria-hidden="true"></span>
    <strong>@Title</strong>

    <span class="text-nowrap">
        Please take our
        <a target="_blank" class="font-weight-bold" href="https://go.microsoft.com/fwlink/?linkid=2137813">brief survey</a>
    </span>
    and tell us what you think.
</div>

@code {
    [Parameter]
    public string Title { get; set; }
}
-e 
--- End of ./Shared/SurveyPrompt.razor ---

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using SharedLibrary.Services;

namespace Logistics
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            string departmentName = Configuration["DepartmentName"];
            services.AddRazorPages();
            services.AddServerSideBlazor();
            services.AddSingleton(new CommunicationService(departmentName));
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapBlazorHub();
                endpoints.MapFallbackToPage("/_Host");
            });
        }
    }
}
-e 
--- End of ./Startup.cs ---

﻿@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using Logistics
@using Logistics.Shared
@using SharedLibrary.Services
@using SharedLibrary.Data
@using SharedLibrary.Data.Logistics
@using Microsoft.Extensions.Configuration-e 
--- End of ./_Imports.razor ---

﻿{
  "DetailedErrors": true,
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  }
}
-e 
--- End of ./appsettings.Development.json ---

﻿{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "NetworkConfig": {
    "IPAddress": "127.0.4.1",
    "ChatIPAddress": "127.0.1.5",
    "Port": 5000
  },
  "CentralServerBaseUrl": "https://localhost:7000",
  "DepartmentName": "Logistics"
}
-e 
--- End of ./appsettings.json ---

