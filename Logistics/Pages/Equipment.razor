@page "/equipment"

<div class="container">
    <h2>Equipment Management</h2>

    <button class="btn btn-primary mb-3" @onclick="ShowCreateForm">Add Equipment</button>

    @if (showCreateForm)
    {
        <Logistics.Components.EquipmentForm OnEquipmentCreated="AddEquipment" OnCancel="HideCreateForm" />
    }

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Make</th>
                <th>Model</th>
                <th>Next Service Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var equipment in equipments)
            {
                <tr>
                    <td>@equipment.Name</td>
                    <td>@equipment.Type</td>
                    <td>@equipment.Make</td>
                    <td>@equipment.Model</td>
                    <td>@equipment.NextServiceDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => ShowEditForm(equipment)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteEquipment(equipment)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (showEditForm)
    {
        <div class="modal fade show" id="editEquipmentModal" tabindex="-1" role="dialog" style="display:block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Equipment</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideEditForm">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <Logistics.Components.EquipmentForm Equipment="selectedEquipment" OnEquipmentUpdated="UpdateEquipment" OnCancel="HideEditForm" />
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private List<SharedLibrary.Data.Logistics.Equipment> equipments = new List<SharedLibrary.Data.Logistics.Equipment>(); 

    private bool showCreateForm = false;
    private bool showEditForm = false;
    private SharedLibrary.Data.Logistics.Equipment selectedEquipment;

    protected override void OnInitialized()
    {
        equipments = GetEquipment();
    }
    private List<SharedLibrary.Data.Logistics.Equipment> GetEquipment()
    {
        return new List<SharedLibrary.Data.Logistics.Equipment>()
    {
            new SharedLibrary.Data.Logistics.Equipment()
            {
                Name = "Bus 1",
                Type = "Bus",
                Make = "Volvo",
                Model = "X100",
                NextServiceDate = DateTime.Now
            },
            new SharedLibrary.Data.Logistics.Equipment()
            {
                Name = "Forklift 1",
                Type = "Forklift",
                Make = "Caterpillar",
                Model = "FL200",
                NextServiceDate = DateTime.Now
            }
        };
    }

    private void ShowCreateForm()
    {
        showCreateForm = true;
    }

    private void HideCreateForm()
    {
        showCreateForm = false;
    }

    private void ShowEditForm(SharedLibrary.Data.Logistics.Equipment equipment)
    {
        selectedEquipment = equipment;
        showEditForm = true;
    }

    private void HideEditForm()
    {
        showEditForm = false;
        selectedEquipment = null;
    }

    private void AddEquipment(SharedLibrary.Data.Logistics.Equipment newEquipment)
    {
        equipments.Add(newEquipment);
        HideCreateForm();
    }

    private void UpdateEquipment(SharedLibrary.Data.Logistics.Equipment updatedEquipment)
    {
        var existingEquipment = equipments.FirstOrDefault(e => e.EquipmentId == updatedEquipment.EquipmentId); 
        if (existingEquipment != null)
        {
            existingEquipment.Name = updatedEquipment.Name;
            existingEquipment.Type = updatedEquipment.Type;
            existingEquipment.Make = updatedEquipment.Make;
            existingEquipment.Model = updatedEquipment.Model;
            existingEquipment.NextServiceDate = updatedEquipment.NextServiceDate;
        }
        HideEditForm();
    }

    private void DeleteEquipment(SharedLibrary.Data.Logistics.Equipment equipmentToDelete)
    {
        equipments.Remove(equipmentToDelete);
    }
}