using System.Threading.Tasks;

namespace SharedLibrary.Abstract
{
    public abstract class DepartmentAPIControllerBase
    {
        protected readonly string _centralServerBaseUrl;  

        protected DepartmentAPIControllerBase(string centralServerBaseUrl)
        {
            _centralServerBaseUrl = centralServerBaseUrl;
        }

        public abstract Task<object> PushDataAsync(object data, string dataType);

        public abstract Task<object> GetDataAsync(string dataType);
    }
}

-e 
--- End of ./Abstract/DepartmentAPIControllerBase.cs ---

﻿using System;

namespace SharedLibrary
{
    public class Class1
    {
    }
}
-e 
--- End of ./Class1.cs ---

﻿using System;
using SharedLibrary.Interfaces.Finance;

namespace SharedLibrary.Data.Finance
{
    public class Asset : IAsset
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public DateTime AcquisitionDate { get; set; }
        public decimal Cost { get; set; }
        public decimal RunningCosts { get; set; }
        public decimal MaintenanceCosts { get; set; }
        public decimal Depreciation { get; set; }
        public decimal ProfitLoss { get; set; }
    }
}
-e 
--- End of ./Data/Finance/Asset.cs ---

﻿using SharedLibrary.Interfaces.Finance;

namespace SharedLibrary.Data.Finance
{
    public class BalanceSheet : IBalanceSheet
    {
        public int Id { get; set; }
        public decimal Assets { get; set; }
        public decimal Liabilities { get; set; }
        public decimal Equity => Assets - Liabilities;
    }

}
-e 
--- End of ./Data/Finance/BalanceSheet.cs ---

﻿using SharedLibrary.Interfaces.Finance;

namespace SharedLibrary.Data.Finance
{
    public class PnL : IPnL
    {
        public int Id { get; set; }
        public decimal Revenue { get; set; }
        public decimal Expenses { get; set; }
        public decimal NetProfit => Revenue - Expenses;
    }

}
-e 
--- End of ./Data/Finance/PnL.cs ---

﻿using System;
using SharedLibrary.Interfaces.Finance;

namespace SharedLibrary.Data.Finance
{
    public class TaxItem : ITaxItem
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal ProjectedTax { get; set; }
        public DateTime DueDate { get; set; }
        public decimal TaxReturn { get; set; }
        public bool IsExempt { get; set; }
    }

}
-e 
--- End of ./Data/Finance/TaxItem.cs ---

﻿using System.ComponentModel.DataAnnotations;
using SharedLibrary.Interfaces.HumanResource;

namespace SharedLibrary.Data.HumanResource
{
    public class Department : IDepartment
    {
        public int DepartmentId { get; set; }

        [Required(ErrorMessage = "Department Name is Required")]
        [StringLength(100, ErrorMessage = "Department Name cannot exceed 100 characters")]
        public string Name { get; set; }

        [StringLength(500, ErrorMessage = "Description cannot exceed 500 characters")]
        public string Description { get; set; }

        public int? EmployeeId { get; set; }
    }
}-e 
--- End of ./Data/HumanResource/Department.cs ---

﻿using System;
using System.ComponentModel.DataAnnotations;
using SharedLibrary.Interfaces.HumanResource;

namespace SharedLibrary.Data.HumanResource
{
    public class DisciplinaryCase : IDisciplinaryCase
    {
        public int CaseId { get; set; }

        [Required(ErrorMessage = "Employee Name is Required")]
        public string EmployeeName { get; set; }

        [Required(ErrorMessage = "Date is Required")]
        [DataType(DataType.Date)]
        public DateTime Date { get; set; }

        [Required(ErrorMessage = "Reason is Required")]
        [StringLength(500, ErrorMessage = "Reason cannot exceed 500 characters")]
        public string Reason { get; set; }

        [StringLength(1000, ErrorMessage = "Description cannot exceed 1000 characters")]
        public string Description { get; set; }

        public string ActionTaken { get; set; }

        public bool IsResolved { get; set; } = false;

        public string ResolutionDetails { get; set; }

    }
}-e 
--- End of ./Data/HumanResource/DisciplinaryCase.cs ---

﻿using System;
using System.ComponentModel.DataAnnotations;
using SharedLibrary.Interfaces.HumanResource;

namespace SharedLibrary.Data.HumanResource
{
    public class Employee : IEmployee
    {
        public int EmployeeId { get; set; }

        [Required(ErrorMessage = "Name is Required")]
        [StringLength(100, ErrorMessage = "Name cannot exceed 100 characters")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Department is Required")]
        public string Department { get; set; }

        [Required(ErrorMessage = "Position is Required")]
        public string Position { get; set; }

        [Required(ErrorMessage = "Email is Required")]
        [EmailAddress(ErrorMessage = "Invalid Email Address")]
        [StringLength(100, ErrorMessage = "Email cannot exceed 100 characters")]
        public string Email { get; set; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime HireDate { get; set; }

        [Range(0, double.MaxValue, ErrorMessage = "Salary must be a non-negative number")]
        public decimal Salary { get; set; }

        [Phone(ErrorMessage = "Invalid Phone Number")]
        public string PhoneNumber { get; set; }

        public string Address { get; set; }

        public string EmergencyContactName { get; set; }
        public string EmergencyContactPhone { get; set; }

        public int? DepartmentId { get; set; }

        public string Notes { get; set; } 
    }
}-e 
--- End of ./Data/HumanResource/Employee.cs ---

﻿using System;
using System.ComponentModel.DataAnnotations;
using SharedLibrary.Interfaces.HumanResource;

namespace SharedLibrary.Data.HumanResource
{
    public class Intern : IIntern
    {
        public int InternId { get; set; }

        [Required(ErrorMessage = "Name is Required")]
        [StringLength(100, ErrorMessage = "Name cannot exceed 100 characters")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Department is Required")]
        public string Department { get; set; }

        [Required(ErrorMessage = "Position is Required")]
        public string Position { get; set; }

        [Required(ErrorMessage = "Email is Required")]
        [EmailAddress(ErrorMessage = "Invalid Email Address")]
        [StringLength(100, ErrorMessage = "Email cannot exceed 100 characters")]
        public string Email { get; set; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime StartDate { get; set; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime EndDate { get; set; }

        public string University { get; set; }

        public decimal HourlyRate { get; set; }

        public int? DepartmentId { get; set; }

        public string Notes { get; set; } 
    }
}-e 
--- End of ./Data/HumanResource/Intern.cs ---

﻿using System;
using System.ComponentModel.DataAnnotations;
using SharedLibrary.Interfaces.HumanResource;

namespace SharedLibrary.Data.HumanResource
{
    public class Pensioner:IPensioner
    {
        public int PensionerId { get; set; }

        [Required(ErrorMessage = "Name is Required")]
        [StringLength(100, ErrorMessage = "Name cannot exceed 100 characters")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Last Department is Required")]
        public string LastDepartment { get; set; }

        [Required(ErrorMessage = "Last Position is Required")]
        public string LastPosition { get; set; }

        [Required(ErrorMessage = "Email is Required")]
        [EmailAddress(ErrorMessage = "Invalid Email Address")]
        [StringLength(100, ErrorMessage = "Email cannot exceed 100 characters")]
        public string Email { get; set; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime RetirementDate { get; set; }

        public decimal PensionAmount { get; set; }

        public string BankName { get; set; }
        public string AccountNumber { get; set; }

        public string Notes { get; set; } 

    }
}-e 
--- End of ./Data/HumanResource/Pensioner.cs ---

﻿using System;
using System.ComponentModel.DataAnnotations;
using SharedLibrary.Interfaces.Logistics;

namespace SharedLibrary.Data.Logistics
{
    public class CostLog : ICostLog
    {
        public int CostLogId { get; set; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime Date { get; set; }

        [Required(ErrorMessage = "Description is Required")]
        public string Description { get; set; }

        public decimal Amount { get; set; }

        public string Category { get; set; } 

        public int? EquipmentId { get; set; }

        public string Notes { get; set; }
    }
}-e 
--- End of ./Data/Logistics/CostLog.cs ---

﻿using System;
using System.ComponentModel.DataAnnotations;
using SharedLibrary.Interfaces.Logistics;

namespace SharedLibrary.Data.Logistics
{
    public class Equipment : IEquipment
    {
        public int EquipmentId { get; set; }

        [Required(ErrorMessage = "Equipment Name is Required")]
        public string Name { get; set; }

        public string Type { get; set; } 

        public string Make { get; set; }
        public string Model { get; set; }
        public string LicensePlate { get; set; } 

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime LastServiceDate { get; set; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime NextServiceDate { get; set; }

        public string ServiceNotes { get; set; }

        public decimal FuelCapacity { get; set; } 
    }
}-e 
--- End of ./Data/Logistics/Equipment.cs ---

﻿using System;
using System.ComponentModel.DataAnnotations;
using SharedLibrary.Interfaces.Logistics;

namespace SharedLibrary.Data.Logistics
{
    public class FuelLog : IFuelLog
    {
        public int FuelLogId { get; set; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime Date { get; set; }

        [Required(ErrorMessage = "Equipment is Required")]
        public int EquipmentId { get; set; }

        public decimal LitersFilled { get; set; }

        public decimal Cost { get; set; }

        public decimal OdometerReading { get; set; }

        public string Notes { get; set; }
    }
}-e 
--- End of ./Data/Logistics/FuelLog.cs ---

﻿using System;
using System.ComponentModel.DataAnnotations;
using SharedLibrary.Interfaces.Logistics;

namespace SharedLibrary.Data.Logistics
{
    public class Shipment : IShipment
    {
        public int ShipmentId { get; set; }

        [Required(ErrorMessage = "Shipment Number is Required")]
        public string ShipmentNumber { get; set; } 

        [Required(ErrorMessage = "Origin is Required")]
        public string Origin { get; set; }

        [Required(ErrorMessage = "Destination is Required")]
        public string Destination { get; set; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime ExpectedDeliveryDate { get; set; }

        public decimal ShippingCost { get; set; }

        public string CurrentStatus { get; set; } 

        public string Carrier { get; set; } 

        public int? EmployeeId { get; set; }

        public string Notes { get; set; }

        public enum ShipmentStatus
        {
            Pending,
            InTransit,
            Delivered,
            Delayed,
            Cancelled
        }
    }
}-e 
--- End of ./Data/Logistics/Shipment.cs ---

﻿using System;
namespace SharedLibrary.Data
{
    public class Message
    {
        public string SenderDepartment
        {
            get;
            set;
        }
        public string RecipientDepartment
        {
            get;
            set;
        }
        public string MessageContent
        {
            get;
            set;
        }
        public MessageType Type
        {
            get;
            set;
        }
        public DateTime Timestamp
        {
            get;
            set;
        } = DateTime.UtcNow;
    }
}
-e 
--- End of ./Data/Message.cs ---

﻿using System;

namespace SharedLibrary.Data
{
    public enum MessageType
    {
        Department,
        CrossDepartment,
        DepartmentAnnouncement,
        OrganizationAnnouncement
    }
}
-e 
--- End of ./Data/MessageType.cs ---

﻿namespace SharedLibrary.Interfaces.Finance
{
    public interface IAsset
    {
        int Id { get; set; }
        public string Name { get; set; }
        System.DateTime AcquisitionDate { get; set; }
        decimal Cost { get; set; }
        decimal RunningCosts { get; set; }
        decimal MaintenanceCosts { get; set; }
    }
}
-e 
--- End of ./Interfaces/Finance/IAsset.cs ---

﻿namespace SharedLibrary.Interfaces.Finance
{
    public interface IBalanceSheet
    {
        int Id { get; set; }
        decimal Assets { get; set; }
        decimal Liabilities { get; set; }
    }
}
-e 
--- End of ./Interfaces/Finance/IBalanceSheet.cs ---

﻿namespace SharedLibrary.Interfaces.Finance
{
    public interface IPnL
    {
        int Id { get; set; }
        decimal Revenue { get; set; }
        decimal Expenses { get; set; }
    }
}
-e 
--- End of ./Interfaces/Finance/IPnL.cs ---

﻿using System;
namespace SharedLibrary.Interfaces.Finance
{
    public interface ITaxItem
    {
        int Id { get; set; }
        string Name { get; set; }
        decimal ProjectedTax { get; set; }
        DateTime DueDate { get; set; }
        decimal TaxReturn { get; set; }
        bool IsExempt { get; set; }
    }
}
-e 
--- End of ./Interfaces/Finance/ITaxItem.cs ---

﻿namespace SharedLibrary.Interfaces.HumanResource
{
    public interface IDepartment
    {
        int DepartmentId { get; set; }

        string Name { get; set; }

        string Description { get; set; }

    }
}
-e 
--- End of ./Interfaces/HumanResource/IDepartment.cs ---

﻿namespace SharedLibrary.Interfaces.HumanResource
{
    public interface IDisciplinaryCase
    {
        int CaseId { get; set; }

        string EmployeeName { get; set; }

        System.DateTime Date { get; set; }

        string Reason { get; set; }

        string Description { get; set; }

        string ActionTaken { get; set; }

        bool IsResolved { get; set; }

        string ResolutionDetails { get; set; }
    }
}
-e 
--- End of ./Interfaces/HumanResource/IDisciplinaryCase.cs ---

﻿namespace SharedLibrary.Interfaces.HumanResource
{
    public interface IEmployee
    {
        public int EmployeeId { get; set; }

        public string Name { get; set; }

        public string Department { get; set; }

        public string Position { get; set; }

        public string Email { get; set; }

        public System.DateTime HireDate { get; set; }

        public decimal Salary { get; set; }

        public string PhoneNumber { get; set; }

        public string Address { get; set; }

    }
}
-e 
--- End of ./Interfaces/HumanResource/IEmployee.cs ---

﻿namespace SharedLibrary.Interfaces.HumanResource
{
    public interface IIntern
    {
        int InternId { get; set; }

        string Name { get; set; }

        string Department { get; set; }

        string Position { get; set; }

        string Email { get; set; }

        System.DateTime StartDate { get; set; }

        System.DateTime EndDate { get; set; }

        string University { get; set; }

    }
}
-e 
--- End of ./Interfaces/HumanResource/IIntern.cs ---

﻿using System;
namespace SharedLibrary.Interfaces.HumanResource
{
    public interface IPensioner
    {
        int PensionerId { get; set; }

        string Name { get; set; }

        string LastDepartment { get; set; }

        string LastPosition { get; set; }

        string Email { get; set; }

        DateTime RetirementDate { get; set; }

        decimal PensionAmount { get; set; }

    }
}
-e 
--- End of ./Interfaces/HumanResource/IPensioner.cs ---

﻿namespace SharedLibrary.Interfaces.Logistics
{
    public interface ICostLog
    {
        int CostLogId { get; set; }

        System.DateTime Date { get; set; }

        string Description { get; set; }

        decimal Amount { get; set; }

        string Category { get; set; }

    }
}
-e 
--- End of ./Interfaces/Logistics/ICostLog.cs ---

﻿namespace SharedLibrary.Interfaces.Logistics
{
    public interface IEquipment
    {
        int EquipmentId { get; set; }

        string Name { get; set; }

        string Type { get; set; }

        string Make { get; set; }
        string Model { get; set; }
        string LicensePlate { get; set; }

        System.DateTime LastServiceDate { get; set; }

    }
}
-e 
--- End of ./Interfaces/Logistics/IEquipment.cs ---

﻿namespace SharedLibrary.Interfaces.Logistics
{
    public interface IFuelLog
    {
        int FuelLogId { get; set; }

        System.DateTime Date { get; set; }

        int EquipmentId { get; set; }

        decimal LitersFilled { get; set; }

        decimal Cost { get; set; }
    }
}
-e 
--- End of ./Interfaces/Logistics/IFuelLog.cs ---

﻿namespace SharedLibrary.Interfaces.Logistics
{
    public interface IShipment
    {
        int ShipmentId { get; set; }

        string ShipmentNumber { get; set; }

        string Origin { get; set; }

        string Destination { get; set; }

        System.DateTime ExpectedDeliveryDate { get; set; }

        decimal ShippingCost { get; set; }

        string CurrentStatus { get; set; }

    }
}
-e 
--- End of ./Interfaces/Logistics/IShipment.cs ---

﻿using Microsoft.AspNetCore.SignalR.Client;
using System;
using System.Threading.Tasks;
using SharedLibrary.Data;

namespace SharedLibrary.Services
{
    public class CommunicationService : IAsyncDisposable
    {
        private readonly string _hubUrl;
        private HubConnection _hubConnection;
        private readonly string _departmentName;
        public event Action<Message> MessageReceived;

        public CommunicationService(string departmentName)
        {
            _departmentName = departmentName;
            _hubUrl = "http://127.0.0.1:8000/communicationHub";

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<Message>("ReceiveMessage", (message) =>
            {
                MessageReceived?.Invoke(message);
            });
        }
        public string DepartmentName
        {
            get
            {
                return _departmentName;
            }
        }
        public async Task StartConnection()
        {
            try
            {
                await _hubConnection.StartAsync();
                Console.WriteLine($"SignalR connection started for {_departmentName}.");
                await _hubConnection.InvokeAsync("JoinDepartmentGroup", _departmentName);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error starting SignalR connection: {ex.Message}");
            }
        }

        public async Task SendMessage(string recipientDepartment, string messageContent, MessageType messageType)
        {
            if (_hubConnection.State != HubConnectionState.Connected)
            {
                Console.WriteLine("SignalR connection is not active.");
                return;
            }

            Message message = new Message
            {
                SenderDepartment = _departmentName,
                RecipientDepartment = recipientDepartment,
                MessageContent = messageContent,
                Type = messageType
            };

            try
            {
                await _hubConnection.InvokeAsync("SendMessage", message);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending message: {ex.Message}");
            }
        }

        public async ValueTask DisposeAsync()
        {
            if (_hubConnection is not null)
            {
                await _hubConnection.DisposeAsync();
            }
        }
    }
}
-e 
--- End of ./Services/CommunicationService.cs ---

<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\BaseLibrary\BaseLibrary.csproj" />
  </ItemGroup>
  <ItemGroup>
    <None Remove="Services\" />
    <None Remove="Data\" />
    <None Remove="Microsoft.AspNetCore.SignalR.Client" />
    <None Remove="Data\Logistics\" />
    <None Remove="Data\HumanResource\" />
    <None Remove="Data\Finance\" />
    <None Remove="Abstract\" />
    <None Remove="Interfaces\" />
    <None Remove="Interfaces\Finance\" />
    <None Remove="Interfaces\HumanResource\" />
    <None Remove="Interfaces\Logistics\" />
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Services\" />
    <Folder Include="Data\" />
    <Folder Include="Data\Logistics\" />
    <Folder Include="Data\HumanResource\" />
    <Folder Include="Data\Finance\" />
    <Folder Include="Abstract\" />
    <Folder Include="Interfaces\" />
    <Folder Include="Interfaces\Finance\" />
    <Folder Include="Interfaces\HumanResource\" />
    <Folder Include="Interfaces\Logistics\" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.SignalR.Client" Version="5.0.17" />
  </ItemGroup>
</Project>
-e 
--- End of ./SharedLibrary.csproj ---

