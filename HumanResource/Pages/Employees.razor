@page "/employees"

<div class="container">
    <h2>Employee Management</h2>

    <button class="btn btn-primary mb-3" @onclick="ShowCreateForm">Add Employee</button>

    @if (showCreateForm)
    {
        <EmployeeForm OnEmployeeCreated="AddEmployee" OnCancel="HideCreateForm" />
    }

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Department</th>
                <th>Position</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.Name</td>
                    <td>@employee.Department</td>
                    <td>@employee.Position</td>
                    <td>@employee.Email</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => ShowEditForm(employee)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteEmployee(employee)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (showEditForm)
    {
        <div class="modal fade show" id="editEmployeeModal" tabindex="-1" role="dialog" style="display:block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Employee</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideEditForm">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <EmployeeForm Employee="selectedEmployee" OnEmployeeUpdated="UpdateEmployee" OnCancel="HideEditForm" />
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private List<Employee> employees = new List<Employee>(); // Replace with data fetching

    private bool showCreateForm = false;
    private bool showEditForm = false;
    private Employee selectedEmployee;

    protected override void OnInitialized()
    {        //LoadEmployees(); // Fetch from a service or database
        employees = GetEmployees(); //dummy data
    }
    private List<Employee> GetEmployees()
    {
        //dummy data
        return new List<Employee>()
    {
            new Employee()
            {
                Name = "Dummy Employee 1",
                Department = "IT",
                Position = "Developer",
                Email = "dummy1@email.com"
            },
            new Employee()
            {
                Name = "Dummy Employee 2",
                Department = "HR",
                Position = "Manager",
                Email = "dummy2@email.com"
            }
        };
    }

    private void ShowCreateForm()
    {
        showCreateForm = true;
    }

    private void HideCreateForm()
    {
        showCreateForm = false;
    }

    private void ShowEditForm(Employee employee)
    {
        selectedEmployee = employee;
        showEditForm = true;
    }

    private void HideEditForm()
    {
        showEditForm = false;
        selectedEmployee = null;
    }

    private void AddEmployee(Employee newEmployee)
    {
        employees.Add(newEmployee);
        HideCreateForm();
        // Optionally: Show a success notification
    }

    private void UpdateEmployee(Employee updatedEmployee)
    {
        var existingEmployee = employees.FirstOrDefault(e => e.EmployeeId == updatedEmployee.EmployeeId); // Assuming Employee has an ID
        if (existingEmployee != null)
        {
            // Update properties of existingEmployee with updatedEmployee
            existingEmployee.Name = updatedEmployee.Name;
            existingEmployee.Department = updatedEmployee.Department;
            existingEmployee.Position = updatedEmployee.Position;
            existingEmployee.Email = updatedEmployee.Email;
        }
        HideEditForm();
        // Optionally: Show a success notification
    }

    private void DeleteEmployee(Employee employeeToDelete)
    {
        employees.Remove(employeeToDelete);
        // Optionally: Show a success notification
    }

    public class Employee
    {
        public int EmployeeId { get; set; } // Example ID
        public string Name { get; set; }
        public string Department { get; set; }
        public string Position { get; set; }
        public string Email { get; set; }

        // Add other relevant properties (e.g., HireDate, Salary, etc.)
    }
}